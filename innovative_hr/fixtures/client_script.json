[
 {
  "_liked_by": "[\"Administrator\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2025-04-29 08:17:05.223306",
  "module": "Innovative HR",
  "name": "Calculate Shifthours",
  "script": "frappe.ui.form.on('Shift Type', {\nstart_time: function (cur_frm, cdt, cdn) {\n    var d = locals[cdt][cdn];\n    var hours=0;\n    var minutes=0;\n    var seconds=0;\n    console.log(cdt, cdn, d.start_time, d.end_time, d.custom_shift_hours);\n\n    if (d.start_time && d.end_time) {\n        \n\t\t\n\t    var hour1 = d.start_time.split(':')[0];\n        var hour2 = d.end_time.split(':')[0];\n        var min1 = d.start_time.split(':')[1];\n        var min2 = d.end_time.split(':')[1];\n\t\tvar sec1 = d.start_time.split(':')[2];\n        var sec2 = d.end_time.split(':')[2];\n\t\t\n\t\tvar diff_hour = hour2 - hour1;\n\t\tvar diff_min = min2 - min1;\n\t\tvar diff_sec = sec2 - sec1;\n\t\t\n\t\tif (diff_hour<0) {\n            diff_hour+= 24;\n        }\n        if (diff_min<0) {\n            diff_min+=60;\n            diff_hour--;\n        }if(diff_min>=60){\n            diff_min-=60;\n            diff_hour++;\n        }\n        if (diff_sec<0) {\n            diff_sec+=60;\n            diff_min--;\n        } else if(diff_sec>=60){\n            diff_sec-=60;\n            diff_min++;\n        }\n\t\n        \n       frappe.model.set_value(cdt,cdn,\"custom_shift_hours\",diff_hour+\":\"+diff_min+\":\"+diff_sec);\n\t   frm.refresh_field(\"custom_shift_hours\");\n    }\n},\nend_time: function (cur_frm, cdt, cdn) {\n    var d = locals[cdt][cdn];\n    var hours=0;\n    var minutes=0;\n    var seconds=0;\n    console.log(cdt, cdn, d.start_time, d.end_time, d.custom_shift_hours);\n\n    if (d.start_time && d.end_time) {\n        \n\t\t\n\t    var hour1 = d.start_time.split(':')[0];\n        var hour2 = d.end_time.split(':')[0];\n        var min1 = d.start_time.split(':')[1];\n        var min2 = d.end_time.split(':')[1];\n\t\tvar sec1 = d.start_time.split(':')[2];\n        var sec2 = d.end_time.split(':')[2];\n\t\t\n\t\tvar diff_hour = hour2 - hour1;\n\t\tvar diff_min = min2 - min1;\n\t\tvar diff_sec = sec2 - sec1;\n\t\t\n\t\tif (diff_hour<0) {\n            diff_hour+= 24;\n        }\n        if (diff_min<0) {\n            diff_min+=60;\n            diff_hour--;\n        }if(diff_min>=60){\n            diff_min-=60;\n            diff_hour++;\n        }\n        if (diff_sec<0) {\n            diff_sec+=60;\n            diff_min--;\n        } else if(diff_sec>=60){\n            diff_sec-=60;\n            diff_min++;\n        }\n\t\t\n      frappe.model.set_value(cdt,cdn,\"custom_shift_hours\",diff_hour+\":\"+diff_min+\":\"+diff_sec);\n\t   frm.refresh_field(\"custom_shift_hours\");\n    }\n}\n\n\n});",
  "view": "Form"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Incentive",
  "enabled": 1,
  "modified": "2025-04-29 08:17:05.013013",
  "module": "Innovative HR",
  "name": "Update Incentive Payable Amount based on the deduction",
  "script": "frappe.ui.form.on('Employee Incentive', {\n\tcustom_deduction:function(frm) {\n\t\tvar incentive = frm.doc.incentive_amount;\n\t\tvar ded = frm.doc.custom_deduction;\n\t\t\n\t    var incentive_payable = incentive - ded;\n\t    frm.set_value('custom_incentive_payable', incentive_payable);\n\t    frm.refresh_field('custom_incentive_payable');\n\t    frm.save();\n\t\t\n\t},\n\tincentive_amount:function(frm) {\n\t\tvar incentive = frm.doc.incentive_amount;\n\t\tvar ded = frm.doc.custom_deduction;\n\t\t\n\t    var incentive_payable = incentive - ded;\n\t    frm.set_value('custom_incentive_payable', incentive_payable);\n\t    frm.refresh_field('custom_incentive_payable');\n\t    frm.save();\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Salary Structure",
  "enabled": 1,
  "modified": "2025-04-29 08:17:05.125140",
  "module": "Innovative HR",
  "name": "Read only salary structure to HR Manager",
  "script": "frappe.ui.form.on('Salary Structure', {\n\tonload: function(frm) {\n        if (!frappe.user.has_role(\"System Manager\")) {\n            frm.fields.forEach(function(field) {\n                field.df.read_only = 1;\n            });\n            frm.refresh_fields();\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Salary Component",
  "enabled": 1,
  "modified": "2025-04-29 08:17:05.157039",
  "module": "Innovative HR",
  "name": "Read only salary component to HR Manager",
  "script": "frappe.ui.form.on('Salary Component', {\n    onload: function(frm) {\n        if (!frappe.user.has_role(\"System Manager\")) {\n            frm.fields.forEach(function(field) {\n                field.df.read_only = 1;\n            });\n            frm.refresh_fields();\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Attendance",
  "enabled": 1,
  "modified": "2025-04-29 08:17:05.199011",
  "module": "Innovative HR",
  "name": "Attendance Live view override",
  "script": "frappe.listview_settings[\"Attendance\"] = {\n\tadd_fields: [\"status\", \"attendance_date\"],\n\n\tget_indicator: function (doc) {\n\t\tif ([\"Present\", \"Work From Home\"].includes(doc.status)) {\n\t\t\treturn [__(doc.status), \"green\", \"status,=,\" + doc.status];\n\t\t} else if ([\"Absent\", \"On Leave\"].includes(doc.status)) {\n\t\t\treturn [__(doc.status), \"red\", \"status,=,\" + doc.status];\n\t\t} else if (doc.status == \"Half Day\") {\n\t\t\treturn [__(doc.status), \"orange\", \"status,=,\" + doc.status];\n\t\t} else if (doc.status == \"Mispunch\") {\n\t\t\treturn [__(doc.status), \"orange\", \"status,=,\" + doc.status];\n\t\t}\n\t},\n\n\tonload: function (list_view) {\n\t\tlet me = this;\n\n\t\tlist_view.page.add_inner_button(__(\"Mark Attendance\"), function () {\n\t\t\tlet first_day_of_month = moment().startOf(\"month\");\n\n\t\t\tif (moment().toDate().getDate() === 1) {\n\t\t\t\tfirst_day_of_month = first_day_of_month.subtract(1, \"month\");\n\t\t\t}\n\n\t\t\tlet dialog = new frappe.ui.Dialog({\n\t\t\t\ttitle: __(\"Mark Attendance\"),\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfieldname: \"employee\",\n\t\t\t\t\t\tlabel: __(\"For Employee\"),\n\t\t\t\t\t\tfieldtype: \"Link\",\n\t\t\t\t\t\toptions: \"Employee\",\n\t\t\t\t\t\tget_query: () => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tquery: \"erpnext.controllers.queries.employee_query\",\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t\treqd: 1,\n\t\t\t\t\t\tonchange: () => me.reset_dialog(dialog),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfieldtype: \"Section Break\",\n\t\t\t\t\t\tfieldname: \"time_period_section\",\n\t\t\t\t\t\thidden: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: __(\"Start\"),\n\t\t\t\t\t\tfieldtype: \"Date\",\n\t\t\t\t\t\tfieldname: \"from_date\",\n\t\t\t\t\t\treqd: 1,\n\t\t\t\t\t\tdefault: first_day_of_month.toDate(),\n\t\t\t\t\t\tonchange: () => me.get_unmarked_days(dialog),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfieldtype: \"Column Break\",\n\t\t\t\t\t\tfieldname: \"time_period_column\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: __(\"End\"),\n\t\t\t\t\t\tfieldtype: \"Date\",\n\t\t\t\t\t\tfieldname: \"to_date\",\n\t\t\t\t\t\treqd: 1,\n\t\t\t\t\t\tdefault: moment().subtract(1, \"days\").toDate(),\n\t\t\t\t\t\tonchange: () => me.get_unmarked_days(dialog),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfieldtype: \"Section Break\",\n\t\t\t\t\t\tfieldname: \"days_section\",\n\t\t\t\t\t\thidden: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: __(\"Status\"),\n\t\t\t\t\t\tfieldtype: \"Select\",\n\t\t\t\t\t\tfieldname: \"status\",\n\t\t\t\t\t\toptions: [\"Present\", \"Absent\", \"Half Day\", \"Work From Home\"],\n\t\t\t\t\t\treqd: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: __(\"Exclude Holidays\"),\n\t\t\t\t\t\tfieldtype: \"Check\",\n\t\t\t\t\t\tfieldname: \"exclude_holidays\",\n\t\t\t\t\t\tonchange: () => me.get_unmarked_days(dialog),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: __(\"Unmarked Attendance for days\"),\n\t\t\t\t\t\tfieldname: \"unmarked_days\",\n\t\t\t\t\t\tfieldtype: \"MultiCheck\",\n\t\t\t\t\t\toptions: [],\n\t\t\t\t\t\tcolumns: 2,\n\t\t\t\t\t\tselect_all: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tprimary_action(data) {\n\t\t\t\t\tif (cur_dialog.no_unmarked_days_left) {\n\t\t\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t\t\t__(\n\t\t\t\t\t\t\t\t\"Attendance from {0} to {1} has already been marked for the Employee {2}\",\n\t\t\t\t\t\t\t\t[data.from_date, data.to_date, data.employee],\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfrappe.confirm(\n\t\t\t\t\t\t\t__(\"Mark attendance as {0} for {1} on selected dates?\", [\n\t\t\t\t\t\t\t\tdata.status,\n\t\t\t\t\t\t\t\tdata.employee,\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\t\t\t\tmethod: \"hrms.hr.doctype.attendance.attendance.mark_bulk_attendance\",\n\t\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcallback: function (r) {\n\t\t\t\t\t\t\t\t\t\tif (r.message === 1) {\n\t\t\t\t\t\t\t\t\t\t\tfrappe.show_alert({\n\t\t\t\t\t\t\t\t\t\t\t\tmessage: __(\"Attendance Marked\"),\n\t\t\t\t\t\t\t\t\t\t\t\tindicator: \"blue\",\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tcur_dialog.hide();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tdialog.hide();\n\t\t\t\t\tlist_view.refresh();\n\t\t\t\t},\n\t\t\t\tprimary_action_label: __(\"Mark Attendance\"),\n\t\t\t});\n\t\t\tdialog.show();\n\t\t});\n\t},\n\n\treset_dialog: function (dialog) {\n\t\tlet fields = dialog.fields_dict;\n\n\t\tdialog.set_df_property(\"time_period_section\", \"hidden\", fields.employee.value ? 0 : 1);\n\n\t\tdialog.set_df_property(\"days_section\", \"hidden\", 1);\n\t\tdialog.set_df_property(\"unmarked_days\", \"options\", []);\n\t\tdialog.no_unmarked_days_left = false;\n\t\tfields.exclude_holidays.value = false;\n\n\t\tfields.to_date.datepicker.update({\n\t\t\tmaxDate: moment().subtract(1, \"days\").toDate(),\n\t\t});\n\n\t\tthis.get_unmarked_days(dialog);\n\t},\n\n\tget_unmarked_days: function (dialog) {\n\t\tlet fields = dialog.fields_dict;\n\t\tif (fields.employee.value && fields.from_date.value && fields.to_date.value) {\n\t\t\tdialog.set_df_property(\"days_section\", \"hidden\", 0);\n\t\t\tdialog.set_df_property(\"status\", \"hidden\", 0);\n\t\t\tdialog.set_df_property(\"exclude_holidays\", \"hidden\", 0);\n\t\t\tdialog.no_unmarked_days_left = false;\n\n\t\t\tfrappe\n\t\t\t\t.call({\n\t\t\t\t\tmethod: \"hrms.hr.doctype.attendance.attendance.get_unmarked_days\",\n\t\t\t\t\tasync: false,\n\t\t\t\t\targs: {\n\t\t\t\t\t\temployee: fields.employee.value,\n\t\t\t\t\t\tfrom_date: fields.from_date.value,\n\t\t\t\t\t\tto_date: fields.to_date.value,\n\t\t\t\t\t\texclude_holidays: fields.exclude_holidays.value,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.then((r) => {\n\t\t\t\t\tvar options = [];\n\n\t\t\t\t\tfor (var d in r.message) {\n\t\t\t\t\t\tvar momentObj = moment(r.message[d], \"YYYY-MM-DD\");\n\t\t\t\t\t\tvar date = momentObj.format(\"DD-MM-YYYY\");\n\t\t\t\t\t\toptions.push({\n\t\t\t\t\t\t\tlabel: date,\n\t\t\t\t\t\t\tvalue: r.message[d],\n\t\t\t\t\t\t\tchecked: 1,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tdialog.set_df_property(\n\t\t\t\t\t\t\"unmarked_days\",\n\t\t\t\t\t\t\"options\",\n\t\t\t\t\t\toptions.length > 0 ? options : [],\n\t\t\t\t\t);\n\t\t\t\t\tdialog.no_unmarked_days_left = options.length === 0;\n\t\t\t\t});\n\t\t}\n\t},\n};",
  "view": "List"
 }
]