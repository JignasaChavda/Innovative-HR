[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-03 17:00:36.624939",
  "module": "Innovative HR",
  "name": "Update CTC/Gross in employee",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Salary Structure Assignment",
  "script": "employees = frappe.get_all(\"Employee\", filters={\"status\": \"Active\"}, fields=[\"name\", \"employment_type\",\"custom_standard_working_hours\"])\nstandard_working_days = frappe.db.get_single_value('HR Settings', 'custom_standard_working_days_in_month')\n\nfor emp in employees:\n    latest_assignment = frappe.get_all(\n        \"Salary Structure Assignment\",\n        filters={\"employee\": emp.name, \"docstatus\": 1},  # Only submitted assignments\n        fields=[\"base\", \"salary_structure\", \"from_date\"],\n        order_by=\"from_date desc\",\n        limit=1\n    )\n    if latest_assignment:\n        base_salary = latest_assignment[0].get(\"base\")\n        if emp.employment_type == \"Worker\":\n            frappe.db.set_value(\"Employee\", emp.name, \"custom_gross_salary\", base_salary)\n        else:\n            frappe.db.set_value(\"Employee\", emp.name, \"ctc\", base_salary)\n            \n        try:\n            if emp.custom_standard_working_hours and float(emp.custom_standard_working_hours) > 0 and standard_working_days > 0:\n                per_day = base_salary / standard_working_days\n                per_hour = per_day / float(emp.custom_standard_working_hours)\n\n                frappe.db.set_value(\"Employee\", emp.name, \"custom_per_day_wages\", per_day)\n                frappe.db.set_value(\"Employee\", emp.name, \"custom_per_hour_wages\", per_hour)\n\n        except ZeroDivisionError:\n            frappe.log_error(f\"ZeroDivisionError: Skipping calculation for Employee {emp.name} due to zero working hours or working days.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-03 18:04:18.257859",
  "module": "Innovative HR",
  "name": "Update Overtime amount in salary slip",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Salary Slip",
  "script": "applicable_ot = doc.custom_applicable_overtime\nper_hour_wage = frappe.db.get_value('Employee', doc.employee, 'custom_per_hour_wages')\n\n\nif applicable_ot and per_hour_wage:\n    overtime_payment = round(applicable_ot * per_hour_wage)\n    component_found = False\n    esi_found = False\n    before_deduction = doc.total_deduction\n\n    for row in doc.deductions:\n        if row.salary_component == \"ESI\":\n            before_deduction = doc.total_deduction - row.amount\n            esi_found = True\n            break\n\n    for row in doc.earnings:\n        if row.salary_component == \"Overtime Payment\":\n            row.amount = overtime_payment\n            component_found = True\n            break\n\n    if not component_found:\n        doc.append(\"earnings\", {\n            \"salary_component\": \"Overtime Payment\",\n            \"amount\": overtime_payment\n        })\n\n    if overtime_payment:\n        new_gross = doc.gross_pay + overtime_payment\n        esi_amount = new_gross * 0.0075 if esi_found else 0\n\n        if esi_found:\n            for row in doc.deductions:\n                if row.salary_component == \"ESI\":\n                    row.amount = esi_amount\n                    break\n\n        new_deduction = before_deduction + esi_amount\n        new_net_pay = new_gross - new_deduction\n\n        doc.gross_pay = new_gross\n        doc.total_deduction = new_deduction\n        doc.net_pay = new_net_pay\n        doc.rounded_total = new_net_pay\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-06 12:43:53.896415",
  "module": "Innovative HR",
  "name": "Delete duplicate checkin",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Employee Checkin",
  "script": "date_time = frappe.utils.get_datetime(doc.time)\n\n# Delete same timestamp log\nlast_log = frappe.get_all(\"Employee Checkin\", filters={\n    \"employee\": doc.employee,\n    \"name\": [\"!=\", doc.name],\n    \"time\": doc.time\n}, fields=[\"name\", \"time\", \"shift\"], order_by=\"time DESC\")\n\nif last_log:\n    frappe.delete_doc(\"Employee Checkin\", doc.name)\n    \n    \n# Delete log for second difference   \nexisting_logs = frappe.get_all(\"Employee Checkin\", filters={\n    \"employee\": doc.employee,\n    \"name\": [\"!=\", doc.name]\n}, fields=[\"name\", \"time\"], order_by=\"time DESC\")\n\nfor log in existing_logs:\n    log_time = frappe.utils.get_datetime(log[\"time\"])\n    \n    if (\n        date_time.date() == log_time.date() and\n        date_time.time().hour == log_time.time().hour and\n        date_time.time().minute == log_time.time().minute and\n        date_time.time().second != log_time.time().second\n    ):\n        frappe.delete_doc(\"Employee Checkin\", doc.name)\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-03 12:20:44.030904",
  "module": "Innovative HR",
  "name": "Set creation date",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Employee",
  "script": "creation = doc.creation\nif doc.custom_creation_date==None:\n    creation_date = creation.date()\n    doc.custom_creation_date = creation_date\n    doc.save()\n",
  "script_type": "DocType Event"
 }
]